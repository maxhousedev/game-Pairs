/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 461:
/***/ (function() {

eval("\n;// CONCATENATED MODULE: ./node_modules/redom/dist/redom.es.js\nfunction parseQuery (query) {\n  var chunks = query.split(/([#.])/);\n  var tagName = '';\n  var id = '';\n  var classNames = [];\n\n  for (var i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i];\n    if (chunk === '#') {\n      id = chunks[++i];\n    } else if (chunk === '.') {\n      classNames.push(chunks[++i]);\n    } else if (chunk.length) {\n      tagName = chunk;\n    }\n  }\n\n  return {\n    tag: tagName || 'div',\n    id: id,\n    className: classNames.join(' ')\n  };\n}\n\nfunction createElement (query, ns) {\n  var ref = parseQuery(query);\n  var tag = ref.tag;\n  var id = ref.id;\n  var className = ref.className;\n  var element = ns ? document.createElementNS(ns, tag) : document.createElement(tag);\n\n  if (id) {\n    element.id = id;\n  }\n\n  if (className) {\n    if (ns) {\n      element.setAttribute('class', className);\n    } else {\n      element.className = className;\n    }\n  }\n\n  return element;\n}\n\nfunction unmount (parent, child) {\n  var parentEl = getEl(parent);\n  var childEl = getEl(child);\n\n  if (child === childEl && childEl.__redom_view) {\n    // try to look up the view if not provided\n    child = childEl.__redom_view;\n  }\n\n  if (childEl.parentNode) {\n    doUnmount(child, childEl, parentEl);\n\n    parentEl.removeChild(childEl);\n  }\n\n  return child;\n}\n\nfunction doUnmount (child, childEl, parentEl) {\n  var hooks = childEl.__redom_lifecycle;\n\n  if (hooksAreEmpty(hooks)) {\n    childEl.__redom_lifecycle = {};\n    return;\n  }\n\n  var traverse = parentEl;\n\n  if (childEl.__redom_mounted) {\n    trigger(childEl, 'onunmount');\n  }\n\n  while (traverse) {\n    var parentHooks = traverse.__redom_lifecycle || {};\n\n    for (var hook in hooks) {\n      if (parentHooks[hook]) {\n        parentHooks[hook] -= hooks[hook];\n      }\n    }\n\n    if (hooksAreEmpty(parentHooks)) {\n      traverse.__redom_lifecycle = null;\n    }\n\n    traverse = traverse.parentNode;\n  }\n}\n\nfunction hooksAreEmpty (hooks) {\n  if (hooks == null) {\n    return true;\n  }\n  for (var key in hooks) {\n    if (hooks[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* global Node, ShadowRoot */\n\nvar hookNames = ['onmount', 'onremount', 'onunmount'];\nvar shadowRootAvailable = typeof window !== 'undefined' && 'ShadowRoot' in window;\n\nfunction mount (parent, child, before, replace) {\n  var parentEl = getEl(parent);\n  var childEl = getEl(child);\n\n  if (child === childEl && childEl.__redom_view) {\n    // try to look up the view if not provided\n    child = childEl.__redom_view;\n  }\n\n  if (child !== childEl) {\n    childEl.__redom_view = child;\n  }\n\n  var wasMounted = childEl.__redom_mounted;\n  var oldParent = childEl.parentNode;\n\n  if (wasMounted && (oldParent !== parentEl)) {\n    doUnmount(child, childEl, oldParent);\n  }\n\n  if (before != null) {\n    if (replace) {\n      parentEl.replaceChild(childEl, getEl(before));\n    } else {\n      parentEl.insertBefore(childEl, getEl(before));\n    }\n  } else {\n    parentEl.appendChild(childEl);\n  }\n\n  doMount(child, childEl, parentEl, oldParent);\n\n  return child;\n}\n\nfunction trigger (el, eventName) {\n  if (eventName === 'onmount' || eventName === 'onremount') {\n    el.__redom_mounted = true;\n  } else if (eventName === 'onunmount') {\n    el.__redom_mounted = false;\n  }\n\n  var hooks = el.__redom_lifecycle;\n\n  if (!hooks) {\n    return;\n  }\n\n  var view = el.__redom_view;\n  var hookCount = 0;\n\n  view && view[eventName] && view[eventName]();\n\n  for (var hook in hooks) {\n    if (hook) {\n      hookCount++;\n    }\n  }\n\n  if (hookCount) {\n    var traverse = el.firstChild;\n\n    while (traverse) {\n      var next = traverse.nextSibling;\n\n      trigger(traverse, eventName);\n\n      traverse = next;\n    }\n  }\n}\n\nfunction doMount (child, childEl, parentEl, oldParent) {\n  var hooks = childEl.__redom_lifecycle || (childEl.__redom_lifecycle = {});\n  var remount = (parentEl === oldParent);\n  var hooksFound = false;\n\n  for (var i = 0, list = hookNames; i < list.length; i += 1) {\n    var hookName = list[i];\n\n    if (!remount) { // if already mounted, skip this phase\n      if (child !== childEl) { // only Views can have lifecycle events\n        if (hookName in child) {\n          hooks[hookName] = (hooks[hookName] || 0) + 1;\n        }\n      }\n    }\n    if (hooks[hookName]) {\n      hooksFound = true;\n    }\n  }\n\n  if (!hooksFound) {\n    childEl.__redom_lifecycle = {};\n    return;\n  }\n\n  var traverse = parentEl;\n  var triggered = false;\n\n  if (remount || (traverse && traverse.__redom_mounted)) {\n    trigger(childEl, remount ? 'onremount' : 'onmount');\n    triggered = true;\n  }\n\n  while (traverse) {\n    var parent = traverse.parentNode;\n    var parentHooks = traverse.__redom_lifecycle || (traverse.__redom_lifecycle = {});\n\n    for (var hook in hooks) {\n      parentHooks[hook] = (parentHooks[hook] || 0) + hooks[hook];\n    }\n\n    if (triggered) {\n      break;\n    } else {\n      if (traverse.nodeType === Node.DOCUMENT_NODE ||\n        (shadowRootAvailable && (traverse instanceof ShadowRoot)) ||\n        (parent && parent.__redom_mounted)\n      ) {\n        trigger(traverse, remount ? 'onremount' : 'onmount');\n        triggered = true;\n      }\n      traverse = parent;\n    }\n  }\n}\n\nfunction setStyle (view, arg1, arg2) {\n  var el = getEl(view);\n\n  if (typeof arg1 === 'object') {\n    for (var key in arg1) {\n      setStyleValue(el, key, arg1[key]);\n    }\n  } else {\n    setStyleValue(el, arg1, arg2);\n  }\n}\n\nfunction setStyleValue (el, key, value) {\n  if (value == null) {\n    el.style[key] = '';\n  } else {\n    el.style[key] = value;\n  }\n}\n\n/* global SVGElement */\n\nvar xlinkns = 'http://www.w3.org/1999/xlink';\n\nfunction setAttr (view, arg1, arg2) {\n  setAttrInternal(view, arg1, arg2);\n}\n\nfunction setAttrInternal (view, arg1, arg2, initial) {\n  var el = getEl(view);\n\n  var isObj = typeof arg1 === 'object';\n\n  if (isObj) {\n    for (var key in arg1) {\n      setAttrInternal(el, key, arg1[key], initial);\n    }\n  } else {\n    var isSVG = el instanceof SVGElement;\n    var isFunc = typeof arg2 === 'function';\n\n    if (arg1 === 'style' && typeof arg2 === 'object') {\n      setStyle(el, arg2);\n    } else if (isSVG && isFunc) {\n      el[arg1] = arg2;\n    } else if (arg1 === 'dataset') {\n      setData(el, arg2);\n    } else if (!isSVG && (arg1 in el || isFunc) && (arg1 !== 'list')) {\n      el[arg1] = arg2;\n    } else {\n      if (isSVG && (arg1 === 'xlink')) {\n        setXlink(el, arg2);\n        return;\n      }\n      if (initial && arg1 === 'class') {\n        arg2 = el.className + ' ' + arg2;\n      }\n      if (arg2 == null) {\n        el.removeAttribute(arg1);\n      } else {\n        el.setAttribute(arg1, arg2);\n      }\n    }\n  }\n}\n\nfunction setXlink (el, arg1, arg2) {\n  if (typeof arg1 === 'object') {\n    for (var key in arg1) {\n      setXlink(el, key, arg1[key]);\n    }\n  } else {\n    if (arg2 != null) {\n      el.setAttributeNS(xlinkns, arg1, arg2);\n    } else {\n      el.removeAttributeNS(xlinkns, arg1, arg2);\n    }\n  }\n}\n\nfunction setData (el, arg1, arg2) {\n  if (typeof arg1 === 'object') {\n    for (var key in arg1) {\n      setData(el, key, arg1[key]);\n    }\n  } else {\n    if (arg2 != null) {\n      el.dataset[arg1] = arg2;\n    } else {\n      delete el.dataset[arg1];\n    }\n  }\n}\n\nfunction redom_es_text (str) {\n  return document.createTextNode((str != null) ? str : '');\n}\n\nfunction parseArgumentsInternal (element, args, initial) {\n  for (var i = 0, list = args; i < list.length; i += 1) {\n    var arg = list[i];\n\n    if (arg !== 0 && !arg) {\n      continue;\n    }\n\n    var type = typeof arg;\n\n    if (type === 'function') {\n      arg(element);\n    } else if (type === 'string' || type === 'number') {\n      element.appendChild(redom_es_text(arg));\n    } else if (isNode(getEl(arg))) {\n      mount(element, arg);\n    } else if (arg.length) {\n      parseArgumentsInternal(element, arg, initial);\n    } else if (type === 'object') {\n      setAttrInternal(element, arg, null, initial);\n    }\n  }\n}\n\nfunction ensureEl (parent) {\n  return typeof parent === 'string' ? html(parent) : getEl(parent);\n}\n\nfunction getEl (parent) {\n  return (parent.nodeType && parent) || (!parent.el && parent) || getEl(parent.el);\n}\n\nfunction isNode (arg) {\n  return arg && arg.nodeType;\n}\n\nvar htmlCache = {};\n\nfunction html (query) {\n  var args = [], len = arguments.length - 1;\n  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n  var element;\n\n  var type = typeof query;\n\n  if (type === 'string') {\n    element = memoizeHTML(query).cloneNode(false);\n  } else if (isNode(query)) {\n    element = query.cloneNode(false);\n  } else if (type === 'function') {\n    var Query = query;\n    element = new (Function.prototype.bind.apply( Query, [ null ].concat( args) ));\n  } else {\n    throw new Error('At least one argument required');\n  }\n\n  parseArgumentsInternal(getEl(element), args, true);\n\n  return element;\n}\n\nvar el = html;\nvar h = (/* unused pure expression or super */ null && (html));\n\nhtml.extend = function extendHtml (query) {\n  var args = [], len = arguments.length - 1;\n  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n  var clone = memoizeHTML(query);\n\n  return html.bind.apply(html, [ this, clone ].concat( args ));\n};\n\nfunction memoizeHTML (query) {\n  return htmlCache[query] || (htmlCache[query] = createElement(query));\n}\n\nfunction setChildren (parent) {\n  var children = [], len = arguments.length - 1;\n  while ( len-- > 0 ) children[ len ] = arguments[ len + 1 ];\n\n  var parentEl = getEl(parent);\n  var current = traverse(parent, children, parentEl.firstChild);\n\n  while (current) {\n    var next = current.nextSibling;\n\n    unmount(parent, current);\n\n    current = next;\n  }\n}\n\nfunction traverse (parent, children, _current) {\n  var current = _current;\n\n  var childEls = new Array(children.length);\n\n  for (var i = 0; i < children.length; i++) {\n    childEls[i] = children[i] && getEl(children[i]);\n  }\n\n  for (var i$1 = 0; i$1 < children.length; i$1++) {\n    var child = children[i$1];\n\n    if (!child) {\n      continue;\n    }\n\n    var childEl = childEls[i$1];\n\n    if (childEl === current) {\n      current = current.nextSibling;\n      continue;\n    }\n\n    if (isNode(childEl)) {\n      var next = current && current.nextSibling;\n      var exists = child.__redom_index != null;\n      var replace = exists && next === childEls[i$1 + 1];\n\n      mount(parent, child, current, replace);\n\n      if (replace) {\n        current = next;\n      }\n\n      continue;\n    }\n\n    if (child.length != null) {\n      current = traverse(parent, child, current);\n    }\n  }\n\n  return current;\n}\n\nfunction listPool (View, key, initData) {\n  return new ListPool(View, key, initData);\n}\n\nvar ListPool = function ListPool (View, key, initData) {\n  this.View = View;\n  this.initData = initData;\n  this.oldLookup = {};\n  this.lookup = {};\n  this.oldViews = [];\n  this.views = [];\n\n  if (key != null) {\n    this.key = typeof key === 'function' ? key : propKey(key);\n  }\n};\n\nListPool.prototype.update = function update (data, context) {\n  var ref = this;\n    var View = ref.View;\n    var key = ref.key;\n    var initData = ref.initData;\n  var keySet = key != null;\n\n  var oldLookup = this.lookup;\n  var newLookup = {};\n\n  var newViews = new Array(data.length);\n  var oldViews = this.views;\n\n  for (var i = 0; i < data.length; i++) {\n    var item = data[i];\n    var view = (void 0);\n\n    if (keySet) {\n      var id = key(item);\n\n      view = oldLookup[id] || new View(initData, item, i, data);\n      newLookup[id] = view;\n      view.__redom_id = id;\n    } else {\n      view = oldViews[i] || new View(initData, item, i, data);\n    }\n    view.update && view.update(item, i, data, context);\n\n    var el = getEl(view.el);\n\n    el.__redom_view = view;\n    newViews[i] = view;\n  }\n\n  this.oldViews = oldViews;\n  this.views = newViews;\n\n  this.oldLookup = oldLookup;\n  this.lookup = newLookup;\n};\n\nfunction propKey (key) {\n  return function (item) {\n    return item[key];\n  };\n}\n\nfunction list (parent, View, key, initData) {\n  return new List(parent, View, key, initData);\n}\n\nvar List = function List (parent, View, key, initData) {\n  this.View = View;\n  this.initData = initData;\n  this.views = [];\n  this.pool = new ListPool(View, key, initData);\n  this.el = ensureEl(parent);\n  this.keySet = key != null;\n};\n\nList.prototype.update = function update (data, context) {\n    if ( data === void 0 ) data = [];\n\n  var ref = this;\n    var keySet = ref.keySet;\n  var oldViews = this.views;\n\n  this.pool.update(data, context);\n\n  var ref$1 = this.pool;\n    var views = ref$1.views;\n    var lookup = ref$1.lookup;\n\n  if (keySet) {\n    for (var i = 0; i < oldViews.length; i++) {\n      var oldView = oldViews[i];\n      var id = oldView.__redom_id;\n\n      if (lookup[id] == null) {\n        oldView.__redom_index = null;\n        unmount(this, oldView);\n      }\n    }\n  }\n\n  for (var i$1 = 0; i$1 < views.length; i$1++) {\n    var view = views[i$1];\n\n    view.__redom_index = i$1;\n  }\n\n  setChildren(this, views);\n\n  if (keySet) {\n    this.lookup = lookup;\n  }\n  this.views = views;\n};\n\nList.extend = function extendList (parent, View, key, initData) {\n  return List.bind(List, parent, View, key, initData);\n};\n\nlist.extend = List.extend;\n\n/* global Node */\n\nfunction place (View, initData) {\n  return new Place(View, initData);\n}\n\nvar Place = function Place (View, initData) {\n  this.el = redom_es_text('');\n  this.visible = false;\n  this.view = null;\n  this._placeholder = this.el;\n\n  if (View instanceof Node) {\n    this._el = View;\n  } else if (View.el instanceof Node) {\n    this._el = View;\n    this.view = View;\n  } else {\n    this._View = View;\n  }\n\n  this._initData = initData;\n};\n\nPlace.prototype.update = function update (visible, data) {\n  var placeholder = this._placeholder;\n  var parentNode = this.el.parentNode;\n\n  if (visible) {\n    if (!this.visible) {\n      if (this._el) {\n        mount(parentNode, this._el, placeholder);\n        unmount(parentNode, placeholder);\n\n        this.el = getEl(this._el);\n        this.visible = visible;\n      } else {\n        var View = this._View;\n        var view = new View(this._initData);\n\n        this.el = getEl(view);\n        this.view = view;\n\n        mount(parentNode, view, placeholder);\n        unmount(parentNode, placeholder);\n      }\n    }\n    this.view && this.view.update && this.view.update(data);\n  } else {\n    if (this.visible) {\n      if (this._el) {\n        mount(parentNode, placeholder, this._el);\n        unmount(parentNode, this._el);\n\n        this.el = placeholder;\n        this.visible = visible;\n\n        return;\n      }\n      mount(parentNode, placeholder, this.view);\n      unmount(parentNode, this.view);\n\n      this.el = placeholder;\n      this.view = null;\n    }\n  }\n  this.visible = visible;\n};\n\n/* global Node */\n\nfunction router (parent, Views, initData) {\n  return new Router(parent, Views, initData);\n}\n\nvar Router = function Router (parent, Views, initData) {\n  this.el = ensureEl(parent);\n  this.Views = Views;\n  this.initData = initData;\n};\n\nRouter.prototype.update = function update (route, data) {\n  if (route !== this.route) {\n    var Views = this.Views;\n    var View = Views[route];\n\n    this.route = route;\n\n    if (View && (View instanceof Node || View.el instanceof Node)) {\n      this.view = View;\n    } else {\n      this.view = View && new View(this.initData, data);\n    }\n\n    setChildren(this.el, [this.view]);\n  }\n  this.view && this.view.update && this.view.update(data, route);\n};\n\nvar ns = 'http://www.w3.org/2000/svg';\n\nvar svgCache = {};\n\nfunction svg (query) {\n  var args = [], len = arguments.length - 1;\n  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n  var element;\n\n  var type = typeof query;\n\n  if (type === 'string') {\n    element = memoizeSVG(query).cloneNode(false);\n  } else if (isNode(query)) {\n    element = query.cloneNode(false);\n  } else if (type === 'function') {\n    var Query = query;\n    element = new (Function.prototype.bind.apply( Query, [ null ].concat( args) ));\n  } else {\n    throw new Error('At least one argument required');\n  }\n\n  parseArgumentsInternal(getEl(element), args, true);\n\n  return element;\n}\n\nvar s = (/* unused pure expression or super */ null && (svg));\n\nsvg.extend = function extendSvg (query) {\n  var clone = memoizeSVG(query);\n\n  return svg.bind(this, clone);\n};\n\nsvg.ns = ns;\n\nfunction memoizeSVG (query) {\n  return svgCache[query] || (svgCache[query] = createElement(query, ns));\n}\n\n\n\n;// CONCATENATED MODULE: ./src/utils/shuffleDurschenfeld.js\nfunction shuffleDurschenfeld(arr) {\n  // перемешивание по Дуршенфельду\n  // проверка является ли аргумент массивом\n  if (!Array.isArray(arr) || !arr.length) return 0;\n  var j; // перемешивание\n\n  for (var i = arr.length - 1; i >= 1; --i) {\n    j = Math.floor(Math.min(0, i) + Math.random() * (Math.max(0, i) + 1 - Math.min(0, i)));\n    var _ref = [arr[j], arr[i]];\n    arr[i] = _ref[0];\n    arr[j] = _ref[1];\n  }\n\n  return arr;\n}\n;// CONCATENATED MODULE: ./src/utils/generateArrOfRepeatitions.js\nfunction generateArrOfRepeatitions(numOfItems) {\n  var numOfRepeations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  // генератор массива повторяющихся цифр\n  var result = [];\n  var item = 0;\n\n  for (var i = 0; i < numOfItems; ++i) {\n    for (var j = 1; j <= numOfRepeations; ++j) {\n      result.push(item);\n    }\n\n    ++item;\n  }\n\n  return result;\n}\n;// CONCATENATED MODULE: ./src/Pairs/js/Form.js\n // форма\n\nvar Form = el('form.form'); // размер игрового поля\n\nvar INITIAL_CELLS = 4;\nvar InputCells = el('input#cells.form__input form__input-cells', {\n  type: 'number',\n  min: 2,\n  step: 2,\n  max: 10\n});\nmount(Form, InputCells);\nvar LabelForInputCells = el('label.form__label form__label-cells', 'Карточек по вертикали/горизонтали:', {\n  for: 'cells'\n});\nmount(Form, LabelForInputCells); // таймер\n\nvar TIME_LIMIT = 20000;\nvar CheckboxTimer = el('input#timer.form__checkbox visually-hidden', {\n  type: 'checkbox',\n  checked: false\n});\nmount(Form, CheckboxTimer);\nvar LabelForCheckboxTimer = el('label.form__label form__label-timer label-for-checkbox', {\n  for: 'timer'\n});\nmount(Form, LabelForCheckboxTimer); // вывод количества оставшихся секунд\n\nvar InputSeconds = el('input#seconds.form__input form__input-timer', {\n  type: 'number',\n  readonly: true\n});\nmount(Form, InputSeconds); // кнопка ввода\n\nvar BtnSubmit = el('button.btn btn__submit', 'Начнем игру!', {\n  type: 'submit'\n}); // кнопка сброса\n\nvar BtnReset = el('button.btn btn__reset', 'Обновить', {\n  type: 'reset'\n}); // контейнер для кнопок\n\nvar BtnContainer = el('.btn-container', [BtnReset, BtnSubmit]);\nmount(Form, BtnContainer);\n;// CONCATENATED MODULE: ./src/Pairs/js/Popup.js\n\nvar PopupContainer = el('.popup');\nvar PopupMessage = el('p.popup__message');\nmount(PopupContainer, PopupMessage);\nvar BtnClosePopup = el('button.btn popup__btn-close', 'Закрыть', {\n  type: 'button'\n});\nmount(PopupContainer, BtnClosePopup);\n;// CONCATENATED MODULE: ./src/Pairs/js/main.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\n\n\n\n\n\n\n\nvar _setGridCSS = /*#__PURE__*/new WeakMap();\n\nvar _createCardLayout = /*#__PURE__*/new WeakMap();\n\nvar _mountPopup = /*#__PURE__*/new WeakMap();\n\nvar _startCountdown = /*#__PURE__*/new WeakMap();\n\nvar _handlerOnCardClick = /*#__PURE__*/new WeakMap();\n\nvar _handlerOnClosePopup = /*#__PURE__*/new WeakMap();\n\nvar _startGame = /*#__PURE__*/new WeakMap();\n\nvar _handlerOnFormSubmit = /*#__PURE__*/new WeakMap();\n\nvar _handlerOnFormReset = /*#__PURE__*/new WeakMap();\n\nvar Pairs = /*#__PURE__*/function () {\n  function Pairs() {\n    var _this = this;\n\n    _classCallCheck(this, Pairs);\n\n    _classPrivateFieldInitSpec(this, _setGridCSS, {\n      writable: true,\n      value: function value(cells) {\n        // сетка для списка\n        setStyle(_this.CardList, {\n          gridTemplateColumns: \"repeat(\".concat(cells, \", 2.25em)\"),\n          gridTemplateRows: \"repeat(\".concat(cells, \", 3em)\")\n        });\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _createCardLayout, {\n      writable: true,\n      value: function value(cardNumber) {\n        var Cards = [];\n        var shuffledArrOfNumbers = shuffleDurschenfeld(generateArrOfRepeatitions(cardNumber / 2));\n\n        for (var i = 0; i < cardNumber; i++) {\n          var Card = el(\"li#\".concat(i, \".card\"), shuffledArrOfNumbers[i], {\n            'data-cardnum': shuffledArrOfNumbers[i]\n          });\n          Cards.push(Card);\n        }\n\n        _this.Cards = Cards;\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _mountPopup, {\n      writable: true,\n      value: function value(message) {\n        document.body.classList.add('no-scroll');\n        mount(_this.container, _this.PopupContainer);\n        _this.PopupMessage.textContent = message;\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _startCountdown, {\n      writable: true,\n      value: function value() {\n        var SECONDS_TIME_IS_RUNNIG_OUT = 10;\n        var secondsCountdown = parseInt(_this.InputSeconds.value, 10);\n        _this.timerID = setInterval(function () {\n          if (secondsCountdown === 0) {\n            clearInterval(_this.timerID);\n\n            _this.InputSeconds.classList.remove('time-is-runningout');\n\n            var message = 'Игра окончена! Время истекло!';\n\n            _classPrivateFieldGet(_this, _mountPopup).call(_this, message);\n          } else {\n            --secondsCountdown;\n\n            if (secondsCountdown === SECONDS_TIME_IS_RUNNIG_OUT) {\n              _this.InputSeconds.classList.add('time-is-runningout');\n            }\n\n            _this.InputSeconds.value = secondsCountdown;\n          }\n        }, 1000);\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _handlerOnCardClick, {\n      writable: true,\n      value: function value(e) {\n        e.currentTarget.classList.add('is-opened');\n        ++_this.gameState.clickCounter;\n\n        if (_this.gameState.clickCounter === 1 || _this.gameState.clickCounter % 2 !== 0) {\n          _this.gameState.prevCard = e.currentTarget;\n        } else {\n          _this.gameState.nextCard = e.currentTarget;\n        }\n\n        var compareCards = function compareCards(prev, next) {\n          var matched = false;\n\n          if (prev && next) {\n            var CARD_IS_OPEN_DELAY = 1000;\n            matched = prev.getAttribute('data-cardnum') === next.getAttribute('data-cardnum'); // проверка совпадений\n\n            if (matched) {\n              // оставить открытыми\n              prev.classList.add('stay-opened');\n              next.classList.add('stay-opened');\n            } else {\n              // скрыть с задержкой\n              setTimeout(function () {\n                prev.classList.remove('is-opened');\n                next.classList.remove('is-opened');\n              }, CARD_IS_OPEN_DELAY);\n            }\n          }\n\n          return matched;\n        }; // сравниваем карточки\n\n\n        if (compareCards(_this.gameState.prevCard, _this.gameState.nextCard)) {\n          _this.gameState.openedCards += 2;\n        }\n\n        if (_this.gameState.openedCards === _this.cardsNumber) {\n          var message = \"\\u0412\\u044B \\u0432\\u044B\\u0438\\u0433\\u0440\\u0430\\u043B\\u0438! \\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043E \\u0445\\u043E\\u0434\\u043E\\u0432 - \".concat(_this.gameState.clickCounter, \".\");\n\n          _classPrivateFieldGet(_this, _mountPopup).call(_this, message);\n        }\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _handlerOnClosePopup, {\n      writable: true,\n      value: function value() {\n        BtnSubmit.classList.remove('game');\n        setAttr(_this.CheckboxTimer, {\n          disabled: false\n        });\n        document.body.classList.remove('no-scroll');\n        unmount(_this.container, _this.PopupContainer);\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _startGame, {\n      writable: true,\n      value: function value() {\n        BtnSubmit.classList.add('game');\n        setAttr(_this.InputCells, {\n          readOnly: true\n        });\n        setAttr(_this.CheckboxTimer, {\n          disabled: true\n        });\n\n        if (_this.CheckboxTimer.checked) {\n          _classPrivateFieldGet(_this, _startCountdown).call(_this);\n        }\n\n        _this.Cards.forEach(function (Card) {\n          Card.addEventListener('click', _classPrivateFieldGet(_this, _handlerOnCardClick));\n        });\n\n        _this.BtnClosePopup.addEventListener('click', _classPrivateFieldGet(_this, _handlerOnClosePopup));\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _handlerOnFormSubmit, {\n      writable: true,\n      value: function value(e) {\n        e.preventDefault(); // размер игрового поля\n\n        var cellsNumber = _this.InputCells.value;\n\n        _classPrivateFieldGet(_this, _setGridCSS).call(_this, cellsNumber); // количество карточек\n\n\n        _this.cardsNumber = Math.pow(cellsNumber, 2);\n\n        _classPrivateFieldGet(_this, _createCardLayout).call(_this, _this.cardsNumber);\n\n        setChildren(_this.CardList, _this.Cards);\n\n        _classPrivateFieldGet(_this, _startGame).call(_this);\n      }\n    });\n\n    _classPrivateFieldInitSpec(this, _handlerOnFormReset, {\n      writable: true,\n      value: function value(e) {\n        e.preventDefault();\n        setAttr(_this.InputCells, {\n          value: INITIAL_CELLS,\n          readOnly: false\n        });\n        setAttr(_this.InputSeconds, {\n          value: TIME_LIMIT / 1000\n        });\n        setAttr(_this.CardList, {\n          style: ''\n        });\n        clearInterval(_this.timerID);\n        setAttr(_this.CheckboxTimer, {\n          disabled: false\n        });\n        BtnSubmit.classList.remove('game');\n        setChildren(_this.CardList, []);\n      }\n    });\n\n    this.container = el('#pair-game.container');\n    this.title = el('h1.title', 'Пары');\n    this.Form = Form;\n    this.InputCells = InputCells;\n    this.CardList = el('ul.card-list');\n    this.CheckboxTimer = CheckboxTimer;\n    this.LabelForCheckboxTimer = LabelForCheckboxTimer;\n    this.InputSeconds = InputSeconds;\n    this.PopupContainer = PopupContainer;\n    this.PopupMessage = PopupMessage;\n    this.BtnSubmit = BtnSubmit;\n    this.BtnClosePopup = BtnClosePopup;\n    this.gameProps = {\n      defaultCells: 4,\n      timeLimit: 60\n    };\n    this.gameState = {\n      clickCounter: 0,\n      openedCards: 0,\n      prevCard: null,\n      nextCard: null\n    };\n    setAttr(this.InputCells, {\n      value: this.gameProps.defaultCells\n    });\n    this.LabelForCheckboxTimer.textContent = \"\\u0423\\u0441\\u043F\\u0435\\u0442\\u044C \\u0437\\u0430 \".concat(parseInt(this.gameProps.timeLimit, 10), \" \\u0441\\u0435\\u043A\");\n    setAttr(this.InputSeconds, {\n      value: this.gameProps.timeLimit\n    });\n    setChildren(this.container, [this.title, this.Form, this.CardList]);\n  }\n\n  _createClass(Pairs, [{\n    key: \"init\",\n    value: //* инициализация\n    function init(parentElement) {\n      mount(parentElement, this.container);\n      this.Form.addEventListener('submit', _classPrivateFieldGet(this, _handlerOnFormSubmit));\n      this.Form.addEventListener('reset', _classPrivateFieldGet(this, _handlerOnFormReset));\n    } //* удаление\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.Form.removeEventListener('submit', _classPrivateFieldGet(this, _handlerOnFormSubmit));\n      this.Form.removeEventListener('reset', _classPrivateFieldGet(this, _handlerOnFormReset));\n      this.Cards.forEach(function (Card) {\n        Card.removeEventListener('click', _classPrivateFieldGet(_this2, _handlerOnCardClick));\n      });\n      this.BtnClosePopup.removeEventListener('click', _classPrivateFieldGet(this, _handlerOnClosePopup));\n      this.container.remove();\n    }\n  }]);\n\n  return Pairs;\n}();\n\n\n;// CONCATENATED MODULE: ./src/index.js\n\nvar ROOT = document.body;\nvar Game = new Pairs();\nGame.init(ROOT);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///461\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[461]();
/******/ 	
/******/ })()
;